import { globby } from 'globby';
import path from 'node:path';
import { parentPort } from 'node:worker_threads';
import ts from 'typescript';

import { DEFAULT_TSCONFIG, loadTSConfig } from '../config';
import { traverse } from '../traverse';
import { TypeSchemaNodeV1, ZodConfig } from '../types';
import { getZodSchema } from './old';
//import { getZodSchema } from './schema';

interface ZodSchema {
  name: string;
  dependencies: string[];
  imports: string[];
  schema: ts.VariableStatement;
}

const factory = ts.factory;

export async function createZodSchema(config: ZodConfig): Promise<string> {
  let tsconfig: ts.CompilerOptions;
  if (typeof config.tsconfig === 'string') {
    tsconfig = ts.parseJsonConfigFileContent(
      loadTSConfig().compilerOptions,
      ts.sys,
      path.resolve(path.dirname(config.tsconfig))
    ).options;
  } else {
    tsconfig = config.tsconfig || DEFAULT_TSCONFIG.compilerOptions;
  }
  if (!config.input.length) {
    throw new Error('No input files');
  }

  const inputFiles = await globby(config.input, {
    absolute: true
  });

  const program = ts.createProgram({
    rootNames: inputFiles,
    options: tsconfig
  });
  const rootFileNames = program.getRootFileNames();

  const rootSourceFiles = program
    .getSourceFiles()
    .filter((sourceFile) => rootFileNames.includes(sourceFile.fileName));

  const rootNodes = new Map<string, TypeSchemaNodeV1>();

  for (const sourceFile of rootSourceFiles) {
    traverse({
      node: sourceFile,
      rootNodes,
      sourceFile,
      jsDocOptions: config.jsdoc || {}
    });
  }

  let schemas: ZodSchema[] = [...rootNodes.values()].map((schemaNode) => ({
    name: schemaNode.node.name.text,
    //...getZodSchema(schemaNode.node, schemaNode.sourceFile, config)
    ...getZodSchema(schemaNode.node, schemaNode.node.name.text, schemaNode.sourceFile, config)
  }));

  schemas = hoistSchemas(schemas);

  const printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed
  });

  const printSourceFile = ts.createSourceFile('typeschema.ts', '', ts.ScriptTarget.Latest);
  const print = (node: ts.Node) =>
    printer.printNode(ts.EmitHint.Unspecified, node, printSourceFile);

  const bannerText = factory.createJSDocComment(config.bannerText || 'Generated by TypeSchema', []);

  const zodSchemas = schemas.map((zodSchema) => print(zodSchema.schema)).join('\n\n');

  const thirdPartyImports = schemas.map((zodSchema) => zodSchema.imports).flat();
  console.log(thirdPartyImports);

  return `${print(bannerText)}\nimport { z } from 'zod';\n\n${thirdPartyImports}\n\n${zodSchemas}`;
}

function hoistSchemas(schemas: ZodSchema[]): ZodSchema[] {
  return schemas;
}
